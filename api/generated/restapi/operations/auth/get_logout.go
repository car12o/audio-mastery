// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/car12o/audio-mastery/api/generated/models"
)

// GetLogoutHandlerFunc turns a function with the right signature into a get logout handler
type GetLogoutHandlerFunc func(GetLogoutParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLogoutHandlerFunc) Handle(params GetLogoutParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetLogoutHandler interface for that can handle valid get logout params
type GetLogoutHandler interface {
	Handle(GetLogoutParams, *models.Principal) middleware.Responder
}

// NewGetLogout creates a new http.Handler for the get logout operation
func NewGetLogout(ctx *middleware.Context, handler GetLogoutHandler) *GetLogout {
	return &GetLogout{Context: ctx, Handler: handler}
}

/* GetLogout swagger:route GET /v1/logout auth getLogout

User logout

*/
type GetLogout struct {
	Context *middleware.Context
	Handler GetLogoutHandler
}

func (o *GetLogout) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetLogoutParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetLogoutInternalServerErrorBody get logout internal server error body
//
// swagger:model GetLogoutInternalServerErrorBody
type GetLogoutInternalServerErrorBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this get logout internal server error body
func (o *GetLogoutInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get logout internal server error body based on context it is used
func (o *GetLogoutInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLogoutInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLogoutInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetLogoutInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetLogoutNoContentBody get logout no content body
//
// swagger:model GetLogoutNoContentBody
type GetLogoutNoContentBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this get logout no content body
func (o *GetLogoutNoContentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get logout no content body based on context it is used
func (o *GetLogoutNoContentBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetLogoutNoContentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetLogoutNoContentBody) UnmarshalBinary(b []byte) error {
	var res GetLogoutNoContentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
