// Code generated by go-swagger; DO NOT EDIT.

package audios

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAudioHandlerFunc turns a function with the right signature into a get audio handler
type GetAudioHandlerFunc func(GetAudioParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAudioHandlerFunc) Handle(params GetAudioParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetAudioHandler interface for that can handle valid get audio params
type GetAudioHandler interface {
	Handle(GetAudioParams, interface{}) middleware.Responder
}

// NewGetAudio creates a new http.Handler for the get audio operation
func NewGetAudio(ctx *middleware.Context, handler GetAudioHandler) *GetAudio {
	return &GetAudio{Context: ctx, Handler: handler}
}

/* GetAudio swagger:route GET /v1/audio/{uuid} audios getAudio

Fetch a single audio

*/
type GetAudio struct {
	Context *middleware.Context
	Handler GetAudioHandler
}

func (o *GetAudio) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAudioParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAudioBadRequestBody get audio bad request body
//
// swagger:model GetAudioBadRequestBody
type GetAudioBadRequestBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this get audio bad request body
func (o *GetAudioBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get audio bad request body based on context it is used
func (o *GetAudioBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAudioBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAudioBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAudioBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetAudioInternalServerErrorBody get audio internal server error body
//
// swagger:model GetAudioInternalServerErrorBody
type GetAudioInternalServerErrorBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this get audio internal server error body
func (o *GetAudioInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get audio internal server error body based on context it is used
func (o *GetAudioInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAudioInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAudioInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetAudioInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetAudioOKBody get audio o k body
//
// swagger:model GetAudioOKBody
type GetAudioOKBody struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// record
	Record []strfmt.Base64 `json:"record"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// user
	// Format: uuid
	User strfmt.UUID `json:"user,omitempty"`
}

// Validate validates this get audio o k body
func (o *GetAudioOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAudioOKBody) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getAudioOK"+"."+"createdAt", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetAudioOKBody) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("getAudioOK"+"."+"id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetAudioOKBody) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("getAudioOK"+"."+"updatedAt", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetAudioOKBody) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(o.User) { // not required
		return nil
	}

	if err := validate.FormatOf("getAudioOK"+"."+"user", "body", "uuid", o.User.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get audio o k body based on context it is used
func (o *GetAudioOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAudioOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAudioOKBody) UnmarshalBinary(b []byte) error {
	var res GetAudioOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
