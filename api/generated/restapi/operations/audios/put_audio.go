// Code generated by go-swagger; DO NOT EDIT.

package audios

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/car12o/audio-mastery/api/generated/models"
)

// PutAudioHandlerFunc turns a function with the right signature into a put audio handler
type PutAudioHandlerFunc func(PutAudioParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PutAudioHandlerFunc) Handle(params PutAudioParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PutAudioHandler interface for that can handle valid put audio params
type PutAudioHandler interface {
	Handle(PutAudioParams, *models.Principal) middleware.Responder
}

// NewPutAudio creates a new http.Handler for the put audio operation
func NewPutAudio(ctx *middleware.Context, handler PutAudioHandler) *PutAudio {
	return &PutAudio{Context: ctx, Handler: handler}
}

/* PutAudio swagger:route PUT /v1/audios/{uuid} audios putAudio

Updates an audio

*/
type PutAudio struct {
	Context *middleware.Context
	Handler PutAudioHandler
}

func (o *PutAudio) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutAudioParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutAudioBadRequestBody put audio bad request body
//
// swagger:model PutAudioBadRequestBody
type PutAudioBadRequestBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this put audio bad request body
func (o *PutAudioBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put audio bad request body based on context it is used
func (o *PutAudioBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAudioBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAudioBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutAudioBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAudioBody put audio body
//
// swagger:model PutAudioBody
type PutAudioBody struct {

	// record
	Record []strfmt.Base64 `json:"record"`
}

// Validate validates this put audio body
func (o *PutAudioBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put audio body based on context it is used
func (o *PutAudioBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAudioBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAudioBody) UnmarshalBinary(b []byte) error {
	var res PutAudioBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAudioInternalServerErrorBody put audio internal server error body
//
// swagger:model PutAudioInternalServerErrorBody
type PutAudioInternalServerErrorBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this put audio internal server error body
func (o *PutAudioInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put audio internal server error body based on context it is used
func (o *PutAudioInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAudioInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAudioInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutAudioInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAudioNoContentBody put audio no content body
//
// swagger:model PutAudioNoContentBody
type PutAudioNoContentBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this put audio no content body
func (o *PutAudioNoContentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put audio no content body based on context it is used
func (o *PutAudioNoContentBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAudioNoContentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAudioNoContentBody) UnmarshalBinary(b []byte) error {
	var res PutAudioNoContentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutAudioUnauthorizedBody put audio unauthorized body
//
// swagger:model PutAudioUnauthorizedBody
type PutAudioUnauthorizedBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this put audio unauthorized body
func (o *PutAudioUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put audio unauthorized body based on context it is used
func (o *PutAudioUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAudioUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAudioUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutAudioUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
