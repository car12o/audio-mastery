// Code generated by go-swagger; DO NOT EDIT.

package audios

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/car12o/audio-mastery/api/generated/models"
)

// ListAudiosHandlerFunc turns a function with the right signature into a list audios handler
type ListAudiosHandlerFunc func(ListAudiosParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAudiosHandlerFunc) Handle(params ListAudiosParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListAudiosHandler interface for that can handle valid list audios params
type ListAudiosHandler interface {
	Handle(ListAudiosParams, *models.Principal) middleware.Responder
}

// NewListAudios creates a new http.Handler for the list audios operation
func NewListAudios(ctx *middleware.Context, handler ListAudiosHandler) *ListAudios {
	return &ListAudios{Context: ctx, Handler: handler}
}

/* ListAudios swagger:route GET /v1/audios audios listAudios

Fetch audios

*/
type ListAudios struct {
	Context *middleware.Context
	Handler ListAudiosHandler
}

func (o *ListAudios) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListAudiosParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ListAudiosInternalServerErrorBody list audios internal server error body
//
// swagger:model ListAudiosInternalServerErrorBody
type ListAudiosInternalServerErrorBody struct {

	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this list audios internal server error body
func (o *ListAudiosInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list audios internal server error body based on context it is used
func (o *ListAudiosInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAudiosInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAudiosInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ListAudiosInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ListAudiosOKBodyItems0 list audios o k body items0
//
// swagger:model ListAudiosOKBodyItems0
type ListAudiosOKBodyItems0 struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// record
	Record []strfmt.Base64 `json:"record"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// user
	// Format: uuid
	User strfmt.UUID `json:"user,omitempty"`
}

// Validate validates this list audios o k body items0
func (o *ListAudiosOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAudiosOKBodyItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListAudiosOKBodyItems0) validateID(formats strfmt.Registry) error {
	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListAudiosOKBodyItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", o.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ListAudiosOKBodyItems0) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(o.User) { // not required
		return nil
	}

	if err := validate.FormatOf("user", "body", "uuid", o.User.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list audios o k body items0 based on context it is used
func (o *ListAudiosOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListAudiosOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAudiosOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res ListAudiosOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
