// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/car12o/audio-mastery/api/generated/models"
	"github.com/car12o/audio-mastery/api/generated/restapi/operations/audios"
	"github.com/car12o/audio-mastery/api/generated/restapi/operations/auth"
	"github.com/car12o/audio-mastery/api/generated/restapi/operations/info"
	"github.com/car12o/audio-mastery/api/generated/restapi/operations/users"
)

// NewAudioMasteryAPI creates a new AudioMastery instance
func NewAudioMasteryAPI(spec *loads.Document) *AudioMasteryAPI {
	return &AudioMasteryAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		AudiosDeleteAudioHandler: audios.DeleteAudioHandlerFunc(func(params audios.DeleteAudioParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation audios.DeleteAudio has not yet been implemented")
		}),
		AudiosGetAudioHandler: audios.GetAudioHandlerFunc(func(params audios.GetAudioParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation audios.GetAudio has not yet been implemented")
		}),
		InfoGetInfoHandler: info.GetInfoHandlerFunc(func(params info.GetInfoParams) middleware.Responder {
			return middleware.NotImplemented("operation info.GetInfo has not yet been implemented")
		}),
		AuthGetLogoutHandler: auth.GetLogoutHandlerFunc(func(params auth.GetLogoutParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation auth.GetLogout has not yet been implemented")
		}),
		AudiosListAudiosHandler: audios.ListAudiosHandlerFunc(func(params audios.ListAudiosParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation audios.ListAudios has not yet been implemented")
		}),
		AudiosPostAudioHandler: audios.PostAudioHandlerFunc(func(params audios.PostAudioParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation audios.PostAudio has not yet been implemented")
		}),
		AuthPostLoginHandler: auth.PostLoginHandlerFunc(func(params auth.PostLoginParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.PostLogin has not yet been implemented")
		}),
		UsersPostUserHandler: users.PostUserHandlerFunc(func(params users.PostUserParams) middleware.Responder {
			return middleware.NotImplemented("operation users.PostUser has not yet been implemented")
		}),
		AudiosPutAudioHandler: audios.PutAudioHandlerFunc(func(params audios.PutAudioParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation audios.PutAudio has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (*models.Principal, error) {
			return nil, errors.NotImplemented("api key auth (bearer) Authorization from header param [Authorization] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*AudioMasteryAPI Audio Mastery API definition */
type AudioMasteryAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AudiosDeleteAudioHandler sets the operation handler for the delete audio operation
	AudiosDeleteAudioHandler audios.DeleteAudioHandler
	// AudiosGetAudioHandler sets the operation handler for the get audio operation
	AudiosGetAudioHandler audios.GetAudioHandler
	// InfoGetInfoHandler sets the operation handler for the get info operation
	InfoGetInfoHandler info.GetInfoHandler
	// AuthGetLogoutHandler sets the operation handler for the get logout operation
	AuthGetLogoutHandler auth.GetLogoutHandler
	// AudiosListAudiosHandler sets the operation handler for the list audios operation
	AudiosListAudiosHandler audios.ListAudiosHandler
	// AudiosPostAudioHandler sets the operation handler for the post audio operation
	AudiosPostAudioHandler audios.PostAudioHandler
	// AuthPostLoginHandler sets the operation handler for the post login operation
	AuthPostLoginHandler auth.PostLoginHandler
	// UsersPostUserHandler sets the operation handler for the post user operation
	UsersPostUserHandler users.PostUserHandler
	// AudiosPutAudioHandler sets the operation handler for the put audio operation
	AudiosPutAudioHandler audios.PutAudioHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *AudioMasteryAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *AudioMasteryAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *AudioMasteryAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AudioMasteryAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AudioMasteryAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AudioMasteryAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AudioMasteryAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AudioMasteryAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AudioMasteryAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AudioMasteryAPI
func (o *AudioMasteryAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.AudiosDeleteAudioHandler == nil {
		unregistered = append(unregistered, "audios.DeleteAudioHandler")
	}
	if o.AudiosGetAudioHandler == nil {
		unregistered = append(unregistered, "audios.GetAudioHandler")
	}
	if o.InfoGetInfoHandler == nil {
		unregistered = append(unregistered, "info.GetInfoHandler")
	}
	if o.AuthGetLogoutHandler == nil {
		unregistered = append(unregistered, "auth.GetLogoutHandler")
	}
	if o.AudiosListAudiosHandler == nil {
		unregistered = append(unregistered, "audios.ListAudiosHandler")
	}
	if o.AudiosPostAudioHandler == nil {
		unregistered = append(unregistered, "audios.PostAudioHandler")
	}
	if o.AuthPostLoginHandler == nil {
		unregistered = append(unregistered, "auth.PostLoginHandler")
	}
	if o.UsersPostUserHandler == nil {
		unregistered = append(unregistered, "users.PostUserHandler")
	}
	if o.AudiosPutAudioHandler == nil {
		unregistered = append(unregistered, "audios.PutAudioHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AudioMasteryAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AudioMasteryAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "bearer":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.BearerAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *AudioMasteryAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *AudioMasteryAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *AudioMasteryAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AudioMasteryAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the audio mastery API
func (o *AudioMasteryAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AudioMasteryAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/audios/{uuid}"] = audios.NewDeleteAudio(o.context, o.AudiosDeleteAudioHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/audios/{uuid}"] = audios.NewGetAudio(o.context, o.AudiosGetAudioHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/info"] = info.NewGetInfo(o.context, o.InfoGetInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/logout"] = auth.NewGetLogout(o.context, o.AuthGetLogoutHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/audios"] = audios.NewListAudios(o.context, o.AudiosListAudiosHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/audios"] = audios.NewPostAudio(o.context, o.AudiosPostAudioHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/login"] = auth.NewPostLogin(o.context, o.AuthPostLoginHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/users"] = users.NewPostUser(o.context, o.UsersPostUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/audios/{uuid}"] = audios.NewPutAudio(o.context, o.AudiosPutAudioHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AudioMasteryAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *AudioMasteryAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *AudioMasteryAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *AudioMasteryAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *AudioMasteryAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
